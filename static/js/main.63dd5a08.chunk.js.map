{"version":3,"sources":["helpers/Dummy.js","App.js","reportWebVitals.js","index.js"],"names":["Dummy","currentPage","className","App","reqStr","useState","isLoading","setIsLoading","setCurrentPage","pagesLength","setPagesLength","query","setQuery","list","setList","savedList","setSavedList","intersectionPrevent","setIntersectionPrevent","offset","setOffset","container","useRef","bottomBlock","observer","scrollerIcon","fetchData","a","fetch","res","json","katas","setTimeout","data","topScroller","scroll","scrollToTop","duration","delay","smooth","useEffect","then","current","IntersectionObserver","entries","isIntersecting","prev","observe","window","onscroll","pageYOffset","offsetHeight","screen","height","classList","add","remove","ref","placeholder","type","onChange","e","target","value","length","filter","el","name","toLowerCase","startsWith","map","i","id","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63dd5a08.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Dummy.scss';\r\n\r\nconst Dummy = ({currentPage}) => {\r\n    return (\r\n        <div className='overlay'>\r\n            <span />\r\n            {currentPage > 0 && <i>Загружается страница {currentPage}...</i>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dummy;\r\n","import './App.scss';\nimport React, {useState, useEffect, useRef} from \"react\";\nimport Dummy from \"./helpers/Dummy\";\nimport {animateScroll as scroll} from 'react-scroll'; // https://www.npmjs.com/package/react-scroll https://www.pluralsight.com/guides/scrolling-inside-a-div-in-react\n\nfunction App() {\n    const userName = `catchaser`;\n    const reqStr = `https://www.codewars.com/api/v1/users/${userName}/code-challenges/completed?page=`;\n    const [isLoading, setIsLoading] = useState(false);\n    const [currentPage, setCurrentPage] = useState(-1);\n    const [pagesLength, setPagesLength] = useState(null);\n    const [query, setQuery] = useState('');\n    const [list, setList] = useState([]);\n    const [savedList, setSavedList] = useState([]);\n    const [intersectionPrevent, setIntersectionPrevent] = useState(false);\n    const [offset, setOffset] = useState(0);\n\n    const container = useRef();\n    const bottomBlock = useRef();\n    const observer = useRef();\n    const scrollerIcon = useRef();\n\n    // ПРИ ДЕПЛОЕ поменять не только /static, но и в chunk.css - background:url(../media/loading-buffering\n\n    const fetchData = async () => {\n        if (currentPage >= pagesLength) {\n            return;\n        }\n        setIsLoading(true);\n        const res = await fetch(`${reqStr}${currentPage}`);\n        const katas = await res.json();\n        if (!pagesLength) {\n            setPagesLength(katas['totalPages']);\n        }\n\n        setTimeout(() => {\n            setIsLoading(false);\n            setList([...list, ...katas.data]);\n            setSavedList([...savedList, ...katas.data]);\n        }, 1000);\n    };\n\n    const handleInputQuery = e => {\n        if (!e.target.value.length) {\n            setList(savedList);\n        }\n        topScroller();\n        setQuery(e.target.value);\n        setIntersectionPrevent(e.target.value.length > 0);\n        setList(savedList.filter(el => el.name.toLowerCase().startsWith(e.target.value.toLowerCase())));\n    };\n\n    const topScroller = () => {\n        scroll.scrollToTop({\n            duration: 1000,\n            delay: 0,\n            smooth: true,\n            offset: 0, // Scrolls to element + 0 pixels down the page\n        });\n    };\n\n    useEffect(() => {\n        if (intersectionPrevent) {\n            return;\n        }\n        fetchData().then();\n    }, [currentPage]);\n\n    useEffect(() => {\n        const callback = (entries) => {\n            if (entries[0].isIntersecting) {\n                setCurrentPage(prev => prev + 1);\n            }\n        };\n        observer.current = new IntersectionObserver(callback);\n        observer.current.observe(bottomBlock.current);\n    }, []);\n\n\n    useEffect(() => {\n        // https://www.npmjs.com/package/@react-hook/window-scroll alternative?\n        window.onscroll = () => {\n            setOffset(window.pageYOffset);\n        }\n    }, [offset]);\n\n    useEffect(() => {\n        container.current.offsetHeight < window.screen.height ?\n            scrollerIcon.current.classList.add('invisible') :\n            scrollerIcon.current.classList.remove('invisible');\n    }, [query]);\n\n    return (\n        <>\n            {isLoading && <Dummy currentPage={currentPage}/>}\n            <div className='wrapper' ref={container}>\n                {!isLoading && <p>Вариант с \"бесконечной\" (условно) лентой - динамическая подгрузка контента по мере\n                    проматывания к низу страницы.</p>}\n\n                <p className={intersectionPrevent ? 'wrapper__alert danger visible' : 'wrapper__alert'}>Динамическая\n                    подгрузка контента не работает одновременно с поиском.<br/> Перед проматыванием страницы вниз\n                    необходимо очистить поле ввода.</p>\n\n                {!isLoading && <input className={offset > 100 && !intersectionPrevent ? 'wrapper__query floating' : 'wrapper__query'} placeholder='Поиск по названию' type='text'\n                       onChange={handleInputQuery}/>}\n\n                {list.length ? <div className='listWrapper'>\n                    {list.map((el, i) => {\n                        return (\n                            <div className='listWrapper__item' key={el.id}>{i + 1}. {el.name}</div>\n                        )\n                    })}\n                </div> : !isLoading ? 'Поиск не дал результатов.' : null}\n\n                <div ref={bottomBlock}\n                     className={intersectionPrevent ? 'wrapper__bottomBlock inactive' : 'wrapper__bottomBlock'}/>\n                {currentPage >= pagesLength && list.length > 0 &&\n                <p className='wrapper__alert success visible'>Все элементы списка загружены.</p>}\n                {!isLoading && <span ref={scrollerIcon} className='scrollTop' onClick={topScroller}>scroll</span>}\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}